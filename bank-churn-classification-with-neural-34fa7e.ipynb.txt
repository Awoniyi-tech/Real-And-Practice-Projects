{"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"sourceId":65711,"databundleVersionId":7405009,"sourceType":"competition"}],"dockerImageVersionId":30673,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"papermill":{"default_parameters":{},"duration":136.636608,"end_time":"2024-01-24T17:12:28.817575","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-01-24T17:10:12.180967","version":"2.4.0"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np \nimport pandas as pd \nimport os\nimport re\nimport warnings\nprint(os.listdir(\"../input\"))","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","papermill":{"duration":0.476368,"end_time":"2024-01-24T17:10:16.345834","exception":false,"start_time":"2024-01-24T17:10:15.869466","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-03-24T05:43:03.157913Z","iopub.execute_input":"2024-03-24T05:43:03.15911Z","iopub.status.idle":"2024-03-24T05:43:04.659097Z","shell.execute_reply.started":"2024-03-24T05:43:03.159069Z","shell.execute_reply":"2024-03-24T05:43:04.65787Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train=pd.read_csv(\"/kaggle/input/playground-series-s4e1/train.csv\")\ntest=pd.read_csv(\"/kaggle/input/playground-series-s4e1/test.csv\")","metadata":{"papermill":{"duration":0.913586,"end_time":"2024-01-24T17:10:17.264762","exception":false,"start_time":"2024-01-24T17:10:16.351176","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-03-24T05:43:04.661561Z","iopub.execute_input":"2024-03-24T05:43:04.662576Z","iopub.status.idle":"2024-03-24T05:43:05.560032Z","shell.execute_reply.started":"2024-03-24T05:43:04.662529Z","shell.execute_reply":"2024-03-24T05:43:05.558221Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nlabel_encoder = LabelEncoder()\nscaler= StandardScaler()\ndf = train.apply(lambda x: label_encoder.fit_transform(x) if x.dtype == 'O' else x)\ntrainup = pd.DataFrame(scaler.fit_transform(df), columns=df.columns)\ncov_matrix = trainup.cov()\nplt.figure(figsize=(12, 12))\nsns.heatmap(cov_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=.5)\nplt.title('Covariance Matrix Heatmap')\nplt.show()","metadata":{"papermill":{"duration":3.39261,"end_time":"2024-01-24T17:10:20.662679","exception":false,"start_time":"2024-01-24T17:10:17.270069","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-03-24T05:43:05.56177Z","iopub.execute_input":"2024-03-24T05:43:05.562231Z","iopub.status.idle":"2024-03-24T05:43:08.901634Z","shell.execute_reply.started":"2024-03-24T05:43:05.562196Z","shell.execute_reply":"2024-03-24T05:43:08.900416Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\ndef visualize(df, string1, string2):\n    col=string1\n    ct= df[col].value_counts(dropna=False).sort_index()\n    grouped_data = df.groupby([string1, string2]).size().unstack(fill_value=0)\n    proportions = grouped_data.div(grouped_data.sum(axis=1), axis=0)\n    fig, ax = plt.subplots(figsize=(20, 14))\n    proportions.plot(kind='bar', stacked=True, ax=ax)\n    plt.xlabel(string1)\n    plt.ylabel('Proportion')\n    plt.legend(title=string2, bbox_to_anchor=(1, 1))\n    plt.show()\nvisualize(train,'Geography', 'Exited')","metadata":{"papermill":{"duration":0.574235,"end_time":"2024-01-24T17:10:21.245525","exception":false,"start_time":"2024-01-24T17:10:20.67129","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-03-24T05:43:08.904775Z","iopub.execute_input":"2024-03-24T05:43:08.906001Z","iopub.status.idle":"2024-03-24T05:43:09.319217Z","shell.execute_reply.started":"2024-03-24T05:43:08.905936Z","shell.execute_reply":"2024-03-24T05:43:09.316032Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def encode_geo(value):\n    if value in['France','Spain']:\n        return 0\n    elif value in['Germany']:\n        return 1\n    else:\n        return 1\ntrain['Geography'] = train['Geography'].apply(encode_geo)\ntest['Geography'] = test['Geography'].apply(encode_geo)\nvisualize(train,'Geography','Exited')","metadata":{"papermill":{"duration":0.61241,"end_time":"2024-01-24T17:10:21.869569","exception":false,"start_time":"2024-01-24T17:10:21.257159","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-03-24T05:43:09.320752Z","iopub.execute_input":"2024-03-24T05:43:09.321206Z","iopub.status.idle":"2024-03-24T05:43:09.908135Z","shell.execute_reply.started":"2024-03-24T05:43:09.321176Z","shell.execute_reply":"2024-03-24T05:43:09.906662Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"visualize(train,'Age', 'Exited')","metadata":{"papermill":{"duration":1.058317,"end_time":"2024-01-24T17:10:22.936247","exception":false,"start_time":"2024-01-24T17:10:21.87793","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-03-24T05:43:09.910164Z","iopub.execute_input":"2024-03-24T05:43:09.910656Z","iopub.status.idle":"2024-03-24T05:43:11.027489Z","shell.execute_reply.started":"2024-03-24T05:43:09.910614Z","shell.execute_reply":"2024-03-24T05:43:11.025726Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def encode_age(value):\n    if value <=36.44 or value >70:\n        return 0\n    elif 36.44< value <=45:\n        return 1\n    elif 45< value <=60:\n        return 2\n    elif 60< value <=70:\n        return 3\n\ntrain['Age'] = train['Age'].apply(encode_age)\ntest['Age'] = test['Age'].apply(encode_age)\nvisualize(train,'Age','Exited')","metadata":{"papermill":{"duration":0.632765,"end_time":"2024-01-24T17:10:23.578231","exception":false,"start_time":"2024-01-24T17:10:22.945466","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-03-24T05:43:11.029289Z","iopub.execute_input":"2024-03-24T05:43:11.029681Z","iopub.status.idle":"2024-03-24T05:43:11.709727Z","shell.execute_reply.started":"2024-03-24T05:43:11.02965Z","shell.execute_reply":"2024-03-24T05:43:11.708767Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nlabel_encoder = LabelEncoder()\nscaler= StandardScaler()\ndf = train.apply(lambda x: label_encoder.fit_transform(x) if x.dtype == 'O' else x)\ntrainup = pd.DataFrame(scaler.fit_transform(df), columns=df.columns)\ncov_matrix = trainup.cov()\nplt.figure(figsize=(12, 12))\nsns.heatmap(cov_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=.5)\nplt.title('Covariance Matrix Heatmap')\nplt.show()","metadata":{"papermill":{"duration":1.483832,"end_time":"2024-01-24T17:10:25.071613","exception":false,"start_time":"2024-01-24T17:10:23.587781","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-03-24T05:43:11.711077Z","iopub.execute_input":"2024-03-24T05:43:11.711547Z","iopub.status.idle":"2024-03-24T05:43:13.077266Z","shell.execute_reply.started":"2024-03-24T05:43:11.711503Z","shell.execute_reply":"2024-03-24T05:43:13.076058Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train=df.drop(['Exited', 'id', 'CustomerId', 'Surname'], axis=1)\nY_train=df['Exited']\ntest = test.apply(lambda x: label_encoder.fit_transform(x) if x.dtype == 'O' else x)\nX_test=test.drop(['id', 'CustomerId','Surname'], axis=1)\nX_train = pd.DataFrame(scaler.fit_transform(X_train), columns=X_train.columns)\nX_test = pd.DataFrame(scaler.fit_transform(X_test), columns=X_test.columns)","metadata":{"papermill":{"duration":0.172087,"end_time":"2024-01-24T17:10:25.256092","exception":false,"start_time":"2024-01-24T17:10:25.084005","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-03-24T05:43:13.079245Z","iopub.execute_input":"2024-03-24T05:43:13.080093Z","iopub.status.idle":"2024-03-24T05:43:13.232121Z","shell.execute_reply.started":"2024-03-24T05:43:13.080051Z","shell.execute_reply":"2024-03-24T05:43:13.231088Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Dropout\nmodel = Sequential()\nmodel.add(Dense(16, input_dim=X_train.shape[1], activation='relu'))\nmodel.add(Dense(24, activation='relu'))\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dense(24, activation='relu'))\nmodel.add(Dense(16, activation='relu'))\nmodel.add(Dense(2, activation='sigmoid'))\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(X_train, Y_train, epochs=10, batch_size=50, validation_split=0.2)","metadata":{"papermill":{"duration":111.697619,"end_time":"2024-01-24T17:12:16.966261","exception":false,"start_time":"2024-01-24T17:10:25.268642","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-03-24T05:43:13.23519Z","iopub.execute_input":"2024-03-24T05:43:13.235796Z","iopub.status.idle":"2024-03-24T05:44:45.514632Z","shell.execute_reply.started":"2024-03-24T05:43:13.235763Z","shell.execute_reply":"2024-03-24T05:44:45.513062Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pred=model.predict(X_test)\ntest['Exited']=pred.T[1]\nSubmission=test[['id', 'Exited']]\nSubmission.to_csv('submission.csv', index=None)","metadata":{"papermill":{"duration":8.86633,"end_time":"2024-01-24T17:12:26.121138","exception":false,"start_time":"2024-01-24T17:12:17.254808","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-03-24T05:44:45.516407Z","iopub.execute_input":"2024-03-24T05:44:45.516906Z","iopub.status.idle":"2024-03-24T05:44:52.278666Z","shell.execute_reply.started":"2024-03-24T05:44:45.516856Z","shell.execute_reply":"2024-03-24T05:44:52.277478Z"},"trusted":true},"execution_count":null,"outputs":[]}]}